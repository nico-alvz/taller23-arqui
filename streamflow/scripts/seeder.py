#!/usr/bin/env python3
"""
Seeder para poblar las bases de datos de StreamFlow con datos de prueba
"""

import requests
import random
import time
import json
from datetime import datetime, timedelta

# Configuraci√≥n
API_BASE_URL = "https://localhost"  # Usar HTTPS a trav√©s de Nginx
AUTH_API_URL = "http://localhost:8001"  # Auth service directo para bootstrap

# Datos de prueba
FIRST_NAMES = [
    "Carlos", "Mar√≠a", "Jos√©", "Ana", "Luis", "Elena", "Pedro", "Sofia", "Miguel", "Carmen",
    "Antonio", "Isabel", "Francisco", "Pilar", "Manuel", "Teresa", "David", "Lucia", "Javier", "Rosa",
    "Rafael", "Cristina", "Daniel", "Patricia", "Jorge", "Marta", "Alejandro", "Beatriz", "Fernando", "Alicia"
]

LAST_NAMES = [
    "Garc√≠a", "Rodr√≠guez", "Gonz√°lez", "Fern√°ndez", "L√≥pez", "Mart√≠nez", "S√°nchez", "P√©rez", "G√≥mez", "Mart√≠n",
    "Jim√©nez", "Ruiz", "Hern√°ndez", "D√≠az", "Moreno", "Mu√±oz", "√Ålvarez", "Romero", "Alonso", "Guti√©rrez",
    "Navarro", "Torres", "Dom√≠nguez", "V√°zquez", "Ramos", "Gil", "Ram√≠rez", "Serrano", "Blanco", "Su√°rez"
]

VIDEO_TITLES = [
    "Aventuras en el Espacio", "El Misterio de la Casa Vieja", "Comedia en la Oficina", "Documentos Perdidos",
    "La √öltima Batalla", "Romance en Par√≠s", "Thriller Nocturno", "Ciencia Ficci√≥n 2024", "Drama Familiar",
    "Acci√≥n Extrema", "Horror en el Bosque", "Comedia Rom√°ntica", "Historia de Guerra", "Fantas√≠a √âpica",
    "Documental Naturaleza", "Suspense Psicol√≥gico", "Musical Broadway", "Western Cl√°sico", "Animaci√≥n 3D",
    "Biograf√≠a Inspiradora", "Serie de Detectives", "Aventura Submarina", "Comedia Stand-up", "Drama Legal",
    "Ciencia y Tecnolog√≠a", "Viajes por el Mundo", "Cocina Internacional", "Deportes Extremos", "Arte Contempor√°neo",
    "Historia Antigua", "M√∫sica Cl√°sica", "Baile Moderno", "Teatro Experimental", "Cine Independiente"
]

VIDEO_DESCRIPTIONS = [
    "Una emocionante aventura que te llevar√° a los confines del universo",
    "Misterio y suspense en una historia que te mantendr√° en vilo",
    "Risas garantizadas con esta divertida comedia",
    "Un thriller que te har√° reflexionar sobre la naturaleza humana",
    "Acci√≥n y aventura en estado puro",
    "Una historia de amor que trasciende el tiempo",
    "Terror psicol√≥gico que te pondr√° los pelos de punta",
    "Ciencia ficci√≥n de √∫ltima generaci√≥n con efectos espectaculares",
    "Un drama conmovedor sobre las relaciones familiares",
    "Documental educativo y entretenido"
]

VIDEO_GENRES = [
    "Acci√≥n", "Comedia", "Drama", "Terror", "Ciencia Ficci√≥n", "Romance", "Thriller", "Documental",
    "Aventura", "Fantas√≠a", "Musical", "Western", "Animaci√≥n", "Biograf√≠a", "Historia", "Deportes"
]

COMMENTS = [
    "¬°Excelente video! Me encant√≥",
    "Muy buena calidad, recomendado",
    "Interesante contenido, gracias por compartir",
    "¬°Incre√≠ble! Lo volver√© a ver",
    "Buen trabajo, sigue as√≠",
    "Me gust√≥ mucho, muy entretenido",
    "Excelente producci√≥n y edici√≥n",
    "Contenido de alta calidad",
    "¬°Fant√°stico! Esperando m√°s videos as√≠",
    "Muy bien explicado y presentado"
]

class StreamFlowSeeder:
    def __init__(self):
        self.admin_token = None
        self.users = []
        self.videos = []
        self.invoices = []
    
    def login_admin(self):
        """Iniciar sesi√≥n como administrador"""
        print("üîê Iniciando sesi√≥n como administrador...")
        
        login_data = {
            "email": "admin@streamflow.com",
            "password": "admin123"
        }
        
        try:
            response = requests.post(f"{AUTH_API_URL}/auth/login", json=login_data, verify=False)
            if response.status_code == 200:
                data = response.json()
                self.admin_token = data["access_token"]
                print("‚úÖ Sesi√≥n de administrador iniciada")
                return True
            else:
                print(f"‚ùå Error iniciando sesi√≥n: {response.text}")
                return False
        except Exception as e:
            print(f"‚ùå Error conectando al servicio de auth: {e}")
            return False
    
    def create_users(self, count=150):
        """Crear usuarios de prueba"""
        print(f"üë• Creando {count} usuarios...")
        
        headers = {"Authorization": f"Bearer {self.admin_token}"} if self.admin_token else {}
        
        for i in range(count):
            first_name = random.choice(FIRST_NAMES)
            last_name = random.choice(LAST_NAMES)
            email = f"{first_name.lower()}.{last_name.lower()}.{i}@streamflow.com"
            role = "Cliente" if i < count - 10 else "Administrador"  # √öltimos 10 como admin
            
            user_data = {
                "first_name": first_name,
                "last_name": last_name,
                "email": email,
                "password": "password123",
                "confirm_password": "password123",
                "role": role
            }
            
            try:
                response = requests.post(f"{API_BASE_URL}/usuarios", json=user_data, headers=headers, verify=False)
                if response.status_code in [200, 201]:
                    user = response.json()
                    self.users.append(user)
                    print(f"  ‚úÖ Usuario creado: {email} ({role})")
                else:
                    print(f"  ‚ùå Error creando usuario {email}: {response.text}")
            except Exception as e:
                print(f"  ‚ùå Error creando usuario {email}: {e}")
            
            time.sleep(0.1)  # Para no sobrecargar
        
        print(f"‚úÖ {len(self.users)} usuarios creados")
    
    def create_videos(self, count=500):
        """Crear videos de prueba"""
        print(f"üé• Creando {count} videos...")
        
        headers = {"Authorization": f"Bearer {self.admin_token}"}
        
        for i in range(count):
            title = f"{random.choice(VIDEO_TITLES)} #{i+1}"
            description = random.choice(VIDEO_DESCRIPTIONS)
            genre = random.choice(VIDEO_GENRES)
            
            video_data = {
                "title": title,
                "description": description,
                "genre": genre
            }
            
            try:
                response = requests.post(f"{API_BASE_URL}/videos", json=video_data, headers=headers, verify=False)
                if response.status_code in [200, 201]:
                    video = response.json()
                    self.videos.append(video)
                    print(f"  ‚úÖ Video creado: {title}")
                else:
                    print(f"  ‚ùå Error creando video {title}: {response.text}")
            except Exception as e:
                print(f"  ‚ùå Error creando video {title}: {e}")
            
            time.sleep(0.1)
        
        print(f"‚úÖ {len(self.videos)} videos creados")
    
    def create_invoices(self, count=350):
        """Crear facturas de prueba"""
        print(f"üßæ Creando {count} facturas...")
        
        headers = {"Authorization": f"Bearer {self.admin_token}"}
        statuses = ["Pendiente", "Pagado", "Vencido"]
        
        for i in range(count):
            if not self.users:
                print("‚ùå No hay usuarios para crear facturas")
                break
            
            user = random.choice(self.users)
            amount = round(random.uniform(9.99, 99.99), 2)
            status = random.choice(statuses)
            
            invoice_data = {
                "user_id": user.get("id", 1),
                "amount": amount,
                "status": status
            }
            
            try:
                response = requests.post(f"{API_BASE_URL}/facturas", json=invoice_data, headers=headers, verify=False)
                if response.status_code in [200, 201]:
                    invoice = response.json()
                    self.invoices.append(invoice)
                    print(f"  ‚úÖ Factura creada: ${amount} para usuario {user.get('email', 'N/A')}")
                else:
                    print(f"  ‚ùå Error creando factura: {response.text}")
            except Exception as e:
                print(f"  ‚ùå Error creando factura: {e}")
            
            time.sleep(0.1)
        
        print(f"‚úÖ {len(self.invoices)} facturas creadas")
    
    def create_likes(self, count=75):
        """Crear likes de prueba"""
        print(f"üëç Creando {count} likes...")
        
        # Crear likes con diferentes usuarios
        for i in range(count):
            if not self.users or not self.videos:
                print("‚ùå No hay suficientes usuarios o videos para crear likes")
                break
            
            user = random.choice(self.users)
            video = random.choice(self.videos)
            
            # Simular login del usuario
            login_data = {
                "email": user.get("email"),
                "password": "password123"
            }
            
            try:
                # Login
                auth_response = requests.post(f"{AUTH_API_URL}/auth/login", json=login_data, verify=False)
                if auth_response.status_code != 200:
                    continue
                
                user_token = auth_response.json()["access_token"]
                headers = {"Authorization": f"Bearer {user_token}"}
                
                # Dar like
                video_id = video.get("id", 1)
                response = requests.post(f"{API_BASE_URL}/interacciones/{video_id}/likes", headers=headers, verify=False)
                if response.status_code in [200, 201]:
                    print(f"  ‚úÖ Like creado para video '{video.get('title', 'N/A')}'")
                else:
                    print(f"  ‚ùå Error creando like: {response.text}")
            except Exception as e:
                print(f"  ‚ùå Error creando like: {e}")
            
            time.sleep(0.1)
        
        print(f"‚úÖ Likes creados")
    
    def create_comments(self, count=35):
        """Crear comentarios de prueba"""
        print(f"üí¨ Creando {count} comentarios...")
        
        for i in range(count):
            if not self.users or not self.videos:
                print("‚ùå No hay suficientes usuarios o videos para crear comentarios")
                break
            
            user = random.choice(self.users)
            video = random.choice(self.videos)
            comment_text = random.choice(COMMENTS)
            
            # Simular login del usuario
            login_data = {
                "email": user.get("email"),
                "password": "password123"
            }
            
            try:
                # Login
                auth_response = requests.post(f"{AUTH_API_URL}/auth/login", json=login_data, verify=False)
                if auth_response.status_code != 200:
                    continue
                
                user_token = auth_response.json()["access_token"]
                headers = {"Authorization": f"Bearer {user_token}"}
                
                # Crear comentario
                video_id = video.get("id", 1)
                comment_data = {"comment": comment_text}
                response = requests.post(f"{API_BASE_URL}/interacciones/{video_id}/comentarios", json=comment_data, headers=headers, verify=False)
                if response.status_code in [200, 201]:
                    print(f"  ‚úÖ Comentario creado para video '{video.get('title', 'N/A')}'")
                else:
                    print(f"  ‚ùå Error creando comentario: {response.text}")
            except Exception as e:
                print(f"  ‚ùå Error creando comentario: {e}")
            
            time.sleep(0.1)
        
        print(f"‚úÖ Comentarios creados")
    
    def run(self):
        """Ejecutar el seeder completo"""
        print("üå± Iniciando seeder de StreamFlow...")
        print("Esperando que los servicios est√©n listos...")
        time.sleep(10)  # Esperar a que los servicios est√©n listos
        
        if not self.login_admin():
            print("‚ùå No se pudo iniciar sesi√≥n como administrador")
            return
        
        # Crear datos en orden
        self.create_users(150)
        self.create_videos(500)
        self.create_invoices(350)
        self.create_likes(75)
        self.create_comments(35)
        
        print("üéâ Seeder completado exitosamente!")
        print(f"üìä Resumen:")
        print(f"  - {len(self.users)} usuarios")
        print(f"  - {len(self.videos)} videos")
        print(f"  - {len(self.invoices)} facturas")

if __name__ == "__main__":
    import urllib3
    urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
    
    seeder = StreamFlowSeeder()
    seeder.run()
