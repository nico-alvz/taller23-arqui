// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// SocialInteractionsClient is the client API for SocialInteractions service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SocialInteractionsClient interface {
	LikeVideo(ctx context.Context, in *LikeVideoRequest, opts ...grpc.CallOption) (*LikeVideoResponse, error)
	CommentVideo(ctx context.Context, in *CommentVideoRequest, opts ...grpc.CallOption) (*CommentVideoResponse, error)
	GetVideoInteractions(ctx context.Context, in *GetVideoInteractionsRequest, opts ...grpc.CallOption) (*GetVideoInteractionsResponse, error)
}

type socialInteractionsClient struct {
	cc grpc.ClientConnInterface
}

func NewSocialInteractionsClient(cc grpc.ClientConnInterface) SocialInteractionsClient {
	return &socialInteractionsClient{cc}
}

func (c *socialInteractionsClient) LikeVideo(ctx context.Context, in *LikeVideoRequest, opts ...grpc.CallOption) (*LikeVideoResponse, error) {
	out := new(LikeVideoResponse)
	err := c.cc.Invoke(ctx, "/SocialService.SocialInteractions/LikeVideo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialInteractionsClient) CommentVideo(ctx context.Context, in *CommentVideoRequest, opts ...grpc.CallOption) (*CommentVideoResponse, error) {
	out := new(CommentVideoResponse)
	err := c.cc.Invoke(ctx, "/SocialService.SocialInteractions/CommentVideo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialInteractionsClient) GetVideoInteractions(ctx context.Context, in *GetVideoInteractionsRequest, opts ...grpc.CallOption) (*GetVideoInteractionsResponse, error) {
	out := new(GetVideoInteractionsResponse)
	err := c.cc.Invoke(ctx, "/SocialService.SocialInteractions/GetVideoInteractions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SocialInteractionsServer is the server API for SocialInteractions service.
// All implementations must embed UnimplementedSocialInteractionsServer
// for forward compatibility
type SocialInteractionsServer interface {
	LikeVideo(context.Context, *LikeVideoRequest) (*LikeVideoResponse, error)
	CommentVideo(context.Context, *CommentVideoRequest) (*CommentVideoResponse, error)
	GetVideoInteractions(context.Context, *GetVideoInteractionsRequest) (*GetVideoInteractionsResponse, error)
	mustEmbedUnimplementedSocialInteractionsServer()
}

// UnimplementedSocialInteractionsServer must be embedded to have forward compatible implementations.
type UnimplementedSocialInteractionsServer struct {
}

func (UnimplementedSocialInteractionsServer) LikeVideo(context.Context, *LikeVideoRequest) (*LikeVideoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LikeVideo not implemented")
}
func (UnimplementedSocialInteractionsServer) CommentVideo(context.Context, *CommentVideoRequest) (*CommentVideoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommentVideo not implemented")
}
func (UnimplementedSocialInteractionsServer) GetVideoInteractions(context.Context, *GetVideoInteractionsRequest) (*GetVideoInteractionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVideoInteractions not implemented")
}
func (UnimplementedSocialInteractionsServer) mustEmbedUnimplementedSocialInteractionsServer() {}

// UnsafeSocialInteractionsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SocialInteractionsServer will
// result in compilation errors.
type UnsafeSocialInteractionsServer interface {
	mustEmbedUnimplementedSocialInteractionsServer()
}

func RegisterSocialInteractionsServer(s *grpc.Server, srv SocialInteractionsServer) {
	s.RegisterService(&_SocialInteractions_serviceDesc, srv)
}

func _SocialInteractions_LikeVideo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LikeVideoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialInteractionsServer).LikeVideo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SocialService.SocialInteractions/LikeVideo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialInteractionsServer).LikeVideo(ctx, req.(*LikeVideoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialInteractions_CommentVideo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommentVideoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialInteractionsServer).CommentVideo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SocialService.SocialInteractions/CommentVideo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialInteractionsServer).CommentVideo(ctx, req.(*CommentVideoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialInteractions_GetVideoInteractions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVideoInteractionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialInteractionsServer).GetVideoInteractions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SocialService.SocialInteractions/GetVideoInteractions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialInteractionsServer).GetVideoInteractions(ctx, req.(*GetVideoInteractionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SocialInteractions_serviceDesc = grpc.ServiceDesc{
	ServiceName: "SocialService.SocialInteractions",
	HandlerType: (*SocialInteractionsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LikeVideo",
			Handler:    _SocialInteractions_LikeVideo_Handler,
		},
		{
			MethodName: "CommentVideo",
			Handler:    _SocialInteractions_CommentVideo_Handler,
		},
		{
			MethodName: "GetVideoInteractions",
			Handler:    _SocialInteractions_GetVideoInteractions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "social.proto",
}
