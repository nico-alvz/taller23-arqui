// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// EmailServiceClient is the client API for EmailService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EmailServiceClient interface {
	SendWelcomeEmail(ctx context.Context, in *WelcomeEmailRequest, opts ...grpc.CallOption) (*EmailResponse, error)
	SendInvoiceEmail(ctx context.Context, in *SendInvoiceEmailRequest, opts ...grpc.CallOption) (*SendInvoiceEmailResponse, error)
	SendPasswordUpdatedEmail(ctx context.Context, in *PasswordEmailRequest, opts ...grpc.CallOption) (*EmailResponse, error)
}

type emailServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEmailServiceClient(cc grpc.ClientConnInterface) EmailServiceClient {
	return &emailServiceClient{cc}
}

func (c *emailServiceClient) SendWelcomeEmail(ctx context.Context, in *WelcomeEmailRequest, opts ...grpc.CallOption) (*EmailResponse, error) {
	out := new(EmailResponse)
	err := c.cc.Invoke(ctx, "/EmailService.EmailService/SendWelcomeEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emailServiceClient) SendInvoiceEmail(ctx context.Context, in *SendInvoiceEmailRequest, opts ...grpc.CallOption) (*SendInvoiceEmailResponse, error) {
	out := new(SendInvoiceEmailResponse)
	err := c.cc.Invoke(ctx, "/EmailService.EmailService/SendInvoiceEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emailServiceClient) SendPasswordUpdatedEmail(ctx context.Context, in *PasswordEmailRequest, opts ...grpc.CallOption) (*EmailResponse, error) {
	out := new(EmailResponse)
	err := c.cc.Invoke(ctx, "/EmailService.EmailService/SendPasswordUpdatedEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EmailServiceServer is the server API for EmailService service.
// All implementations must embed UnimplementedEmailServiceServer
// for forward compatibility
type EmailServiceServer interface {
	SendWelcomeEmail(context.Context, *WelcomeEmailRequest) (*EmailResponse, error)
	SendInvoiceEmail(context.Context, *SendInvoiceEmailRequest) (*SendInvoiceEmailResponse, error)
	SendPasswordUpdatedEmail(context.Context, *PasswordEmailRequest) (*EmailResponse, error)
	mustEmbedUnimplementedEmailServiceServer()
}

// UnimplementedEmailServiceServer must be embedded to have forward compatible implementations.
type UnimplementedEmailServiceServer struct {
}

func (UnimplementedEmailServiceServer) SendWelcomeEmail(context.Context, *WelcomeEmailRequest) (*EmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendWelcomeEmail not implemented")
}
func (UnimplementedEmailServiceServer) SendInvoiceEmail(context.Context, *SendInvoiceEmailRequest) (*SendInvoiceEmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendInvoiceEmail not implemented")
}
func (UnimplementedEmailServiceServer) SendPasswordUpdatedEmail(context.Context, *PasswordEmailRequest) (*EmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendPasswordUpdatedEmail not implemented")
}
func (UnimplementedEmailServiceServer) mustEmbedUnimplementedEmailServiceServer() {}

// UnsafeEmailServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EmailServiceServer will
// result in compilation errors.
type UnsafeEmailServiceServer interface {
	mustEmbedUnimplementedEmailServiceServer()
}

func RegisterEmailServiceServer(s *grpc.Server, srv EmailServiceServer) {
	s.RegisterService(&_EmailService_serviceDesc, srv)
}

func _EmailService_SendWelcomeEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WelcomeEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailServiceServer).SendWelcomeEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/EmailService.EmailService/SendWelcomeEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailServiceServer).SendWelcomeEmail(ctx, req.(*WelcomeEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmailService_SendInvoiceEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendInvoiceEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailServiceServer).SendInvoiceEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/EmailService.EmailService/SendInvoiceEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailServiceServer).SendInvoiceEmail(ctx, req.(*SendInvoiceEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmailService_SendPasswordUpdatedEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PasswordEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailServiceServer).SendPasswordUpdatedEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/EmailService.EmailService/SendPasswordUpdatedEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailServiceServer).SendPasswordUpdatedEmail(ctx, req.(*PasswordEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _EmailService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "EmailService.EmailService",
	HandlerType: (*EmailServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendWelcomeEmail",
			Handler:    _EmailService_SendWelcomeEmail_Handler,
		},
		{
			MethodName: "SendInvoiceEmail",
			Handler:    _EmailService_SendInvoiceEmail_Handler,
		},
		{
			MethodName: "SendPasswordUpdatedEmail",
			Handler:    _EmailService_SendPasswordUpdatedEmail_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "email.proto",
}
