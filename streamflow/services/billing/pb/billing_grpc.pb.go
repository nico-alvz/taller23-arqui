// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// BillingServiceClient is the client API for BillingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BillingServiceClient interface {
	CreateInvoice(ctx context.Context, in *CreateInvoiceRequest, opts ...grpc.CallOption) (*CreateInvoiceResponse, error)
	GetInvoiceById(ctx context.Context, in *GetInvoiceByIdRequest, opts ...grpc.CallOption) (*GetInvoiceByIdResponse, error)
	UpdateInvoiceState(ctx context.Context, in *UpdateInvoiceStateRequest, opts ...grpc.CallOption) (*UpdateInvoiceStateResponse, error)
	DeleteInvoice(ctx context.Context, in *DeleteInvoiceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListInvoicesByUser(ctx context.Context, in *ListInvoicesByUserRequest, opts ...grpc.CallOption) (*ListInvoicesByUserResponse, error)
}

type billingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBillingServiceClient(cc grpc.ClientConnInterface) BillingServiceClient {
	return &billingServiceClient{cc}
}

func (c *billingServiceClient) CreateInvoice(ctx context.Context, in *CreateInvoiceRequest, opts ...grpc.CallOption) (*CreateInvoiceResponse, error) {
	out := new(CreateInvoiceResponse)
	err := c.cc.Invoke(ctx, "/BillingService.BillingService/CreateInvoice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingServiceClient) GetInvoiceById(ctx context.Context, in *GetInvoiceByIdRequest, opts ...grpc.CallOption) (*GetInvoiceByIdResponse, error) {
	out := new(GetInvoiceByIdResponse)
	err := c.cc.Invoke(ctx, "/BillingService.BillingService/GetInvoiceById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingServiceClient) UpdateInvoiceState(ctx context.Context, in *UpdateInvoiceStateRequest, opts ...grpc.CallOption) (*UpdateInvoiceStateResponse, error) {
	out := new(UpdateInvoiceStateResponse)
	err := c.cc.Invoke(ctx, "/BillingService.BillingService/UpdateInvoiceState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingServiceClient) DeleteInvoice(ctx context.Context, in *DeleteInvoiceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/BillingService.BillingService/DeleteInvoice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingServiceClient) ListInvoicesByUser(ctx context.Context, in *ListInvoicesByUserRequest, opts ...grpc.CallOption) (*ListInvoicesByUserResponse, error) {
	out := new(ListInvoicesByUserResponse)
	err := c.cc.Invoke(ctx, "/BillingService.BillingService/ListInvoicesByUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BillingServiceServer is the server API for BillingService service.
// All implementations must embed UnimplementedBillingServiceServer
// for forward compatibility
type BillingServiceServer interface {
	CreateInvoice(context.Context, *CreateInvoiceRequest) (*CreateInvoiceResponse, error)
	GetInvoiceById(context.Context, *GetInvoiceByIdRequest) (*GetInvoiceByIdResponse, error)
	UpdateInvoiceState(context.Context, *UpdateInvoiceStateRequest) (*UpdateInvoiceStateResponse, error)
	DeleteInvoice(context.Context, *DeleteInvoiceRequest) (*emptypb.Empty, error)
	ListInvoicesByUser(context.Context, *ListInvoicesByUserRequest) (*ListInvoicesByUserResponse, error)
	mustEmbedUnimplementedBillingServiceServer()
}

// UnimplementedBillingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBillingServiceServer struct {
}

func (UnimplementedBillingServiceServer) CreateInvoice(context.Context, *CreateInvoiceRequest) (*CreateInvoiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateInvoice not implemented")
}
func (UnimplementedBillingServiceServer) GetInvoiceById(context.Context, *GetInvoiceByIdRequest) (*GetInvoiceByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInvoiceById not implemented")
}
func (UnimplementedBillingServiceServer) UpdateInvoiceState(context.Context, *UpdateInvoiceStateRequest) (*UpdateInvoiceStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateInvoiceState not implemented")
}
func (UnimplementedBillingServiceServer) DeleteInvoice(context.Context, *DeleteInvoiceRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteInvoice not implemented")
}
func (UnimplementedBillingServiceServer) ListInvoicesByUser(context.Context, *ListInvoicesByUserRequest) (*ListInvoicesByUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListInvoicesByUser not implemented")
}
func (UnimplementedBillingServiceServer) mustEmbedUnimplementedBillingServiceServer() {}

// UnsafeBillingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BillingServiceServer will
// result in compilation errors.
type UnsafeBillingServiceServer interface {
	mustEmbedUnimplementedBillingServiceServer()
}

func RegisterBillingServiceServer(s *grpc.Server, srv BillingServiceServer) {
	s.RegisterService(&_BillingService_serviceDesc, srv)
}

func _BillingService_CreateInvoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateInvoiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServiceServer).CreateInvoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BillingService.BillingService/CreateInvoice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServiceServer).CreateInvoice(ctx, req.(*CreateInvoiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingService_GetInvoiceById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInvoiceByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServiceServer).GetInvoiceById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BillingService.BillingService/GetInvoiceById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServiceServer).GetInvoiceById(ctx, req.(*GetInvoiceByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingService_UpdateInvoiceState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateInvoiceStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServiceServer).UpdateInvoiceState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BillingService.BillingService/UpdateInvoiceState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServiceServer).UpdateInvoiceState(ctx, req.(*UpdateInvoiceStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingService_DeleteInvoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteInvoiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServiceServer).DeleteInvoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BillingService.BillingService/DeleteInvoice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServiceServer).DeleteInvoice(ctx, req.(*DeleteInvoiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingService_ListInvoicesByUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListInvoicesByUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServiceServer).ListInvoicesByUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BillingService.BillingService/ListInvoicesByUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServiceServer).ListInvoicesByUser(ctx, req.(*ListInvoicesByUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _BillingService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "BillingService.BillingService",
	HandlerType: (*BillingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateInvoice",
			Handler:    _BillingService_CreateInvoice_Handler,
		},
		{
			MethodName: "GetInvoiceById",
			Handler:    _BillingService_GetInvoiceById_Handler,
		},
		{
			MethodName: "UpdateInvoiceState",
			Handler:    _BillingService_UpdateInvoiceState_Handler,
		},
		{
			MethodName: "DeleteInvoice",
			Handler:    _BillingService_DeleteInvoice_Handler,
		},
		{
			MethodName: "ListInvoicesByUser",
			Handler:    _BillingService_ListInvoicesByUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "billing.proto",
}
